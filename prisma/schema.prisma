generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  name              String
  password          String?
  avatar            String?
  isVerified        Boolean          @default(false)
  role              Role             @default(USER)
  jobs              Job[]
  workExperience    WorkExperience[]
  projects          Project[]
  skills            String[]
  contactNo         String
  bio               String
  yearsOfExperience String
  currentLocation   String
  primaryRole       String
  email             String           @unique
  emailVerified     DateTime?
  oauthProvider     OauthProvider? // Tracks OAuth provider (e.g., 'google')
  oauthId           String?
  socials           String[]

  blockedByAdmin DateTime?
}

model WorkExperience {
  id                Int             @id @default(autoincrement())
  companyName       String
  position          String
  description       String
  employmentType    EmployementType
  workMode          WorkMode
  currentWorkStatus Boolean
  startDate         DateTime
  endDate           DateTime?
  userId            String
  user              User            @relation(fields: [userId], references: [id])
}

model Project {
  id                 Int     @id @default(autoincrement())
  name        String
  description String?
  liveLink    String?
  githubLink  String
  userId             String
  user               User    @relation(fields: [userId], references: [id])
}

model VerificationToken {
  token      String
  identifier String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       TokenType

  @@unique([token, identifier])
}

model Job {
  id                 String          @id @default(cuid())
  userId             String
  title              String
  description        String?
  companyName        String          @map("company_name")
  companyBio         String          @map("company_bio")
  companyEmail       String          @map("company_email")
  category           String
  type               EmployementType
  workMode           WorkMode        @map("work_mode")
  currency           Currency        @default(INR)
  city               String
  address            String
  application        String
  companyLogo        String
  skills             String[]
  expired            Boolean         @default(false)
  hasExpiryDate      Boolean         @default(false) @map("has_expiry_date")
  expiryDate         DateTime?
  hasSalaryRange     Boolean         @default(false) @map("has_salary_range")
  minSalary          Int?
  maxSalary          Int?
  hasExperiencerange Boolean         @default(false) @map("has_experience_range")
  minExperience      Int?
  maxExperience      Int?
  isVerifiedJob      Boolean         @default(false) @map("is_verified_job")
  postedAt           DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TokenType {
  EMAIL_VERIFICATION
  RESET_PASSWORD
}

enum Currency {
  INR
  USD
}

enum OauthProvider {
  GOOGLE
}

enum WorkMode {
  remote
  hybrid
  office
}

enum Role {
  USER
  ADMIN
  HR
}

enum EmployementType {
  Full_time
  Part_time
  Internship
  Contract
}
